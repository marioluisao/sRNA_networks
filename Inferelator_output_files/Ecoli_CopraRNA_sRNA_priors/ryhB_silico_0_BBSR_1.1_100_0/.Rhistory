load("/Users/mario/Documents/NYU/Inferelator-tfa/Inferelator_2015.08.05/output/ryhB_silico_0_BBSR_1.1_100_0/betas_frac_tp_100_perm_1--frac_fp_0_perm_1_1.1.RData")
load("/Users/mario/Documents/NYU/Inferelator-tfa/Inferelator_2015.08.05/output/ryhB_silico_0_BBSR_1.1_100_0/combinedconf_frac_tp_100_perm_1--frac_fp_0_perm_1_1.1.RData")
load("/Users/mario/Documents/NYU/Inferelator-tfa/Inferelator_2015.08.05/output/ryhB_silico_0_BBSR_1.1_100_0/params_and_input.RData")
colnames(comb.confs)
betas.mean<-matrix(nrow=dim(comb.confs)[1],ncol=dim(comb.confs)[2],0)
for(y in 1:length(betas))
{
betas.mean<- betas.mean + betas[[y]]
}
combined_betas<- betas.mean/20
#combined_betas<-combined_betas[,c(-82:-84)]
#combined_betas<-combined_betas[,c(-197:-198)]
combined_betas<-combined_betas[,c(-137:-138)]
normalization<-function(confMatrix)
{
score.range<-range(confMatrix)
deltaScore<-score.range[2]-score.range[1]
tempConf<-(confMatrix-score.range[1])/deltaScore
output<-tempConf
output
}
conf_normalized<-normalization(as.matrix(comb.confs))
#now I need to adapt the gs network and delete the pred.group last col in confidence matrix
conf_normalized<-conf_normalized[,c(-137:-138)]
order_gs_mat<-matrix(0,ncol=dim(conf_normalized)[2],nrow=dim(conf_normalized)[1])
rownames(order_gs_mat)<-rownames(conf_normalized)
colnames(order_gs_mat)<-colnames(conf_normalized)
gsMatrix<-IN$gs.mat
for(i in 1:dim(conf_normalized)[2])
{
current_regulator<-as.character(colnames(conf_normalized)[i])
pos_gs_matrix<-which(colnames(gsMatrix)==current_regulator)
order_gs_mat[,i]<-gsMatrix[,pos_gs_matrix]
}
areaUnderCurve <- function(x, y)
{
dx <- diff(x)
my <- y[1:(length(y) - 1)] + diff(y) / 2
return(sum(dx * my))
}
calcAupr <- function(pred, gs) {
ord.idx <- order(abs(pred), decreasing = T)
prec <- cumsum(gs[ord.idx]) / cumsum(rep(1, length(ord.idx))) #also known as positive predictive value
rec  <- cumsum(gs[ord.idx]) / sum(gs)                     #also know as true positive rate
fpr  <- cumsum(gs[ord.idx] == 0) / (length(gs) - sum(gs)) #false positive rate
prec <- c(prec[1], prec)
rec <- c(0, rec)
fpr <- c(0, fpr)
aupr <- areaUnderCurve(rec, prec)
auroc <- areaUnderCurve(fpr, rec)
return(list(prec=prec, rec=rec, fpr = fpr, AUPR = aupr, AUROC = auroc))
}
temp<-calcAupr(conf_normalized,abs(order_gs_mat))
print(temp$AUPR)
sRNAs<-colnames(IN$priors.mat)[140]
sRNAs
recovered.interactions<-c()
novel.interactions<-c()
confidence_threshold<-conf_normalized[order(conf_normalized,decreasing=T)][max(which(temp$prec==0.5))]
recovered.mat<-order_gs_mat
recovered.mat[which(conf_normalized < confidence_threshold)]<-0
which(recovered.mat[,sRNAs]!=0)
novel.interactions<-matrix(0, ncol=ncol(conf_normalized),nrow=nrow(conf_normalized))
rownames(novel.interactions)<-rownames(conf_normalized)
colnames(novel.interactions)<-colnames(conf_normalized)
novel.interactions[which(conf_normalized >= confidence_threshold)]<- sign(combined_betas[which(conf_normalized >= confidence_threshold)])
which(novel.interactions[,sRNAs]!=0)
load("/Users/mario/Documents/NYU/Inferelator-tfa/Inferelator_2015.08.05/output/ryhB_silico_2_BBSR_1.1_100_0/betas_frac_tp_100_perm_1--frac_fp_0_perm_1_1.1.RData")
load("/Users/mario/Documents/NYU/Inferelator-tfa/Inferelator_2015.08.05/output/ryhB_silico_2_BBSR_1.1_100_0/combinedconf_frac_tp_100_perm_1--frac_fp_0_perm_1_1.1.RData")
load("/Users/mario/Documents/NYU/Inferelator-tfa/Inferelator_2015.08.05/output/ryhB_silico_2_BBSR_1.1_100_0/params_and_input.RData")
colnames(comb.confs)
betas.mean<-matrix(nrow=dim(comb.confs)[1],ncol=dim(comb.confs)[2],0)
for(y in 1:length(betas))
{
betas.mean<- betas.mean + betas[[y]]
}
combined_betas<- betas.mean/20
#combined_betas<-combined_betas[,c(-82:-84)]
#combined_betas<-combined_betas[,c(-197:-198)]
combined_betas<-combined_betas[,c(-137:-138)]
normalization<-function(confMatrix)
{
score.range<-range(confMatrix)
deltaScore<-score.range[2]-score.range[1]
tempConf<-(confMatrix-score.range[1])/deltaScore
output<-tempConf
output
}
conf_normalized<-normalization(as.matrix(comb.confs))
#now I need to adapt the gs network and delete the pred.group last col in confidence matrix
conf_normalized<-conf_normalized[,c(-137:-138)]
#conf_normalized<-conf_normalized[,c(-197:-198)]
#conf_normalized<-conf_normalized[,c(-82:-84)]
order_gs_mat<-matrix(0,ncol=dim(conf_normalized)[2],nrow=dim(conf_normalized)[1])
rownames(order_gs_mat)<-rownames(conf_normalized)
colnames(order_gs_mat)<-colnames(conf_normalized)
gsMatrix<-IN$gs.mat
for(i in 1:dim(conf_normalized)[2])
{
current_regulator<-as.character(colnames(conf_normalized)[i])
pos_gs_matrix<-which(colnames(gsMatrix)==current_regulator)
order_gs_mat[,i]<-gsMatrix[,pos_gs_matrix]
}
areaUnderCurve <- function(x, y)
{
dx <- diff(x)
my <- y[1:(length(y) - 1)] + diff(y) / 2
return(sum(dx * my))
}
calcAupr <- function(pred, gs) {
ord.idx <- order(abs(pred), decreasing = T)
prec <- cumsum(gs[ord.idx]) / cumsum(rep(1, length(ord.idx))) #also known as positive predictive value
rec  <- cumsum(gs[ord.idx]) / sum(gs)                     #also know as true positive rate
fpr  <- cumsum(gs[ord.idx] == 0) / (length(gs) - sum(gs)) #false positive rate
prec <- c(prec[1], prec)
rec <- c(0, rec)
fpr <- c(0, fpr)
aupr <- areaUnderCurve(rec, prec)
auroc <- areaUnderCurve(fpr, rec)
return(list(prec=prec, rec=rec, fpr = fpr, AUPR = aupr, AUROC = auroc))
}
temp<-calcAupr(conf_normalized,abs(order_gs_mat))
print(temp$AUPR)
colSums(abs(IN$priors.mat))
recovered.interactions<-c()
novel.interactions<-c()
confidence_threshold<-conf_normalized[order(conf_normalized,decreasing=T)][max(which(temp$prec==0.5))]
recovered.mat<-order_gs_mat
recovered.mat[which(conf_normalized < confidence_threshold)]<-0
which(recovered.mat[,sRNAs]!=0)
novel.interactions<-matrix(0, ncol=ncol(conf_normalized),nrow=nrow(conf_normalized))
rownames(novel.interactions)<-rownames(conf_normalized)
colnames(novel.interactions)<-colnames(conf_normalized)
novel.interactions[which(conf_normalized >= confidence_threshold)]<- sign(combined_betas[which(conf_normalized >= confidence_threshold)])
novel.interactions<-novel.interactions - recovered.mat
which(novel.interactions[,sRNAs]!=0)
novel.interactions<-matrix(0, ncol=ncol(conf_normalized),nrow=nrow(conf_normalized))
rownames(novel.interactions)<-rownames(conf_normalized)
colnames(novel.interactions)<-colnames(conf_normalized)
novel.interactions[which(conf_normalized >= confidence_threshold)]<- sign(combined_betas[which(conf_normalized >= confidence_threshold)])
which(novel.interactions[,sRNAs]!=0)
load("/Users/mario/Documents/NYU/Inferelator-tfa/Inferelator_2015.08.05/output/gcvB_silico_1_BBSR_1.1_100_0/betas_frac_tp_100_perm_1--frac_fp_0_perm_1_1.1.RData")
load("/Users/mario/Documents/NYU/Inferelator-tfa/Inferelator_2015.08.05/output/gcvB_silico_1_BBSR_1.1_100_0/combinedconf_frac_tp_100_perm_1--frac_fp_0_perm_1_1.1.RData")
load("/Users/mario/Documents/NYU/Inferelator-tfa/Inferelator_2015.08.05/output/gcvB_silico_1_BBSR_1.1_100_0/params_and_input.RData")
colnames(IN$priors.mat)
sRNAs<-colnames(IN$priors.mat)[140]
colnames(comb.confs)
IN$tf.names
betas.mean<-matrix(nrow=dim(comb.confs)[1],ncol=dim(comb.confs)[2],0)
for(y in 1:length(betas))
{
betas.mean<- betas.mean + betas[[y]]
}
combined_betas<- betas.mean/20
#combined_betas<-combined_betas[,c(-82:-84)]
#combined_betas<-combined_betas[,c(-197:-198)]
combined_betas<-combined_betas[,c(-135:-137)]
normalization<-function(confMatrix)
{
score.range<-range(confMatrix)
deltaScore<-score.range[2]-score.range[1]
tempConf<-(confMatrix-score.range[1])/deltaScore
output<-tempConf
output
}
conf_normalized<-normalization(as.matrix(comb.confs))
#now I need to adapt the gs network and delete the pred.group last col in confidence matrix
conf_normalized<-conf_normalized[,c(-135:-137)]
#conf_normalized<-conf_normalized[,c(-197:-198)]
#conf_normalized<-conf_normalized[,c(-82:-84)]
order_gs_mat<-matrix(0,ncol=dim(conf_normalized)[2],nrow=dim(conf_normalized)[1])
rownames(order_gs_mat)<-rownames(conf_normalized)
colnames(order_gs_mat)<-colnames(conf_normalized)
gsMatrix<-IN$gs.mat
for(i in 1:dim(conf_normalized)[2])
{
current_regulator<-as.character(colnames(conf_normalized)[i])
pos_gs_matrix<-which(colnames(gsMatrix)==current_regulator)
order_gs_mat[,i]<-gsMatrix[,pos_gs_matrix]
}
areaUnderCurve <- function(x, y)
{
dx <- diff(x)
my <- y[1:(length(y) - 1)] + diff(y) / 2
return(sum(dx * my))
}
calcAupr <- function(pred, gs) {
ord.idx <- order(abs(pred), decreasing = T)
prec <- cumsum(gs[ord.idx]) / cumsum(rep(1, length(ord.idx))) #also known as positive predictive value
rec  <- cumsum(gs[ord.idx]) / sum(gs)                     #also know as true positive rate
fpr  <- cumsum(gs[ord.idx] == 0) / (length(gs) - sum(gs)) #false positive rate
prec <- c(prec[1], prec)
rec <- c(0, rec)
fpr <- c(0, fpr)
aupr <- areaUnderCurve(rec, prec)
auroc <- areaUnderCurve(fpr, rec)
return(list(prec=prec, rec=rec, fpr = fpr, AUPR = aupr, AUROC = auroc))
}
temp<-calcAupr(conf_normalized,abs(order_gs_mat))
print(temp$AUPR)
colSums(abs(IN$priors.mat))
sum(colSums(abs(IN$priors.mat)))-46
ecovered.interactions<-c()
novel.interactions<-c()
confidence_threshold<-conf_normalized[order(conf_normalized,decreasing=T)][max(which(temp$prec==0.5))]
recovered.mat<-order_gs_mat
recovered.mat[which(conf_normalized < confidence_threshold)]<-0
which(recovered.mat[,sRNAs]!=0)
9/11
novel.interactions<-matrix(0, ncol=ncol(conf_normalized),nrow=nrow(conf_normalized))
rownames(novel.interactions)<-rownames(conf_normalized)
colnames(novel.interactions)<-colnames(conf_normalized)
novel.interactions[which(conf_normalized >= confidence_threshold)]<- sign(combined_betas[which(conf_normalized >= confidence_threshold)])
novel.interactions<-novel.interactions - recovered.mat
which(novel.interactions[,sRNAs]!=0)
length(which(novel.interactions[,sRNAs]!=0))
novel.interactions<-matrix(0, ncol=ncol(conf_normalized),nrow=nrow(conf_normalized))
rownames(novel.interactions)<-rownames(conf_normalized)
colnames(novel.interactions)<-colnames(conf_normalized)
novel.interactions[which(conf_normalized >= confidence_threshold)]<- sign(combined_betas[which(conf_normalized >= confidence_threshold)])
colSums(abs(novel.interactions[,sRNAs]))
length(which(novel.interactions[,sRNAs]!=0))
load("/Users/mario/Documents/NYU/Inferelator-tfa/Inferelator_2015.08.05/output/ryhB_silico_1_BBSR_1.1_100_0/betas_frac_tp_100_perm_1--frac_fp_0_perm_1_1.1.RData")
load("/Users/mario/Documents/NYU/Inferelator-tfa/Inferelator_2015.08.05/output/ryhB_silico_1_BBSR_1.1_100_0/combinedconf_frac_tp_100_perm_1--frac_fp_0_perm_1_1.1.RData")
load("/Users/mario/Documents/NYU/Inferelator-tfa/Inferelator_2015.08.05/output/ryhB_silico_1_BBSR_1.1_100_0/params_and_input.RData")
sRNAs<-colnames(IN$priors.mat)[140]
sRNAs
colnames(comb.confs)
betas.mean<-matrix(nrow=dim(comb.confs)[1],ncol=dim(comb.confs)[2],0)
for(y in 1:length(betas))
{
betas.mean<- betas.mean + betas[[y]]
}
combined_betas<- betas.mean/20
#combined_betas<-combined_betas[,c(-82:-84)]
#combined_betas<-combined_betas[,c(-197:-198)]
combined_betas<-combined_betas[,c(-137:-138)]
normalization<-function(confMatrix)
{
score.range<-range(confMatrix)
deltaScore<-score.range[2]-score.range[1]
tempConf<-(confMatrix-score.range[1])/deltaScore
output<-tempConf
output
}
conf_normalized<-normalization(as.matrix(comb.confs))
#now I need to adapt the gs network and delete the pred.group last col in confidence matrix
conf_normalized<-conf_normalized[,c(-137:-138)]
#conf_normalized<-conf_normalized[,c(-197:-198)]
#conf_normalized<-conf_normalized[,c(-82:-84)]
order_gs_mat<-matrix(0,ncol=dim(conf_normalized)[2],nrow=dim(conf_normalized)[1])
rownames(order_gs_mat)<-rownames(conf_normalized)
colnames(order_gs_mat)<-colnames(conf_normalized)
gsMatrix<-IN$gs.mat
for(i in 1:dim(conf_normalized)[2])
{
current_regulator<-as.character(colnames(conf_normalized)[i])
pos_gs_matrix<-which(colnames(gsMatrix)==current_regulator)
order_gs_mat[,i]<-gsMatrix[,pos_gs_matrix]
}
areaUnderCurve <- function(x, y)
{
dx <- diff(x)
my <- y[1:(length(y) - 1)] + diff(y) / 2
return(sum(dx * my))
}
calcAupr <- function(pred, gs) {
ord.idx <- order(abs(pred), decreasing = T)
prec <- cumsum(gs[ord.idx]) / cumsum(rep(1, length(ord.idx))) #also known as positive predictive value
rec  <- cumsum(gs[ord.idx]) / sum(gs)                     #also know as true positive rate
fpr  <- cumsum(gs[ord.idx] == 0) / (length(gs) - sum(gs)) #false positive rate
prec <- c(prec[1], prec)
rec <- c(0, rec)
fpr <- c(0, fpr)
aupr <- areaUnderCurve(rec, prec)
auroc <- areaUnderCurve(fpr, rec)
return(list(prec=prec, rec=rec, fpr = fpr, AUPR = aupr, AUROC = auroc))
}
temp<-calcAupr(conf_normalized,abs(order_gs_mat))
print(temp$AUPR)
colSums(abs(IN$priors.mat))
recovered.interactions<-c()
novel.interactions<-c()
confidence_threshold<-conf_normalized[order(conf_normalized,decreasing=T)][max(which(temp$prec==0.5))]
recovered.mat<-order_gs_mat
recovered.mat[which(conf_normalized < confidence_threshold)]<-0
colSums(abs(recovered.mat[,sRNAs]))
which(recovered.mat[,sRNAs]!=0)
load("/Users/mario/Documents/NYU/Inferelator-tfa/Inferelator_2015.08.05/output/ryhB_silico_3_BBSR_1.1_100_0/betas_frac_tp_100_perm_1--frac_fp_0_perm_1_1.1.RData")
load("/Users/mario/Documents/NYU/Inferelator-tfa/Inferelator_2015.08.05/output/ryhB_silico_3_BBSR_1.1_100_0/combinedconf_frac_tp_100_perm_1--frac_fp_0_perm_1_1.1.RData")
load("/Users/mario/Documents/NYU/Inferelator-tfa/Inferelator_2015.08.05/output/ryhB_silico_3_BBSR_1.1_100_0/params_and_input.RData")
colnames(comb.confs)
colnames(IN$priors.mat)
length(which(IN$priors.mat[,"ryhB_b4451_4"]!=0))
which(IN$priors.mat[,"ryhB_b4451_4"]!=0)
betas.mean<-matrix(nrow=dim(comb.confs)[1],ncol=dim(comb.confs)[2],0)
for(y in 1:length(betas))
{
betas.mean<- betas.mean + betas[[y]]
}
combined_betas<- betas.mean/20
#combined_betas<-combined_betas[,c(-82:-84)]
#combined_betas<-combined_betas[,c(-197:-198)]
combined_betas<-combined_betas[,c(-135:-137)]
normalization<-function(confMatrix)
{
score.range<-range(confMatrix)
deltaScore<-score.range[2]-score.range[1]
tempConf<-(confMatrix-score.range[1])/deltaScore
output<-tempConf
output
}
conf_normalized<-normalization(as.matrix(comb.confs))
#now I need to adapt the gs network and delete the pred.group last col in confidence matrix
conf_normalized<-conf_normalized[,c(-135:-137)]
#conf_normalized<-conf_normalized[,c(-197:-198)]
#conf_normalized<-conf_normalized[,c(-82:-84)]
order_gs_mat<-matrix(0,ncol=dim(conf_normalized)[2],nrow=dim(conf_normalized)[1])
rownames(order_gs_mat)<-rownames(conf_normalized)
colnames(order_gs_mat)<-colnames(conf_normalized)
gsMatrix<-IN$gs.mat
for(i in 1:dim(conf_normalized)[2])
{
current_regulator<-as.character(colnames(conf_normalized)[i])
pos_gs_matrix<-which(colnames(gsMatrix)==current_regulator)
order_gs_mat[,i]<-gsMatrix[,pos_gs_matrix]
}
areaUnderCurve <- function(x, y)
{
dx <- diff(x)
my <- y[1:(length(y) - 1)] + diff(y) / 2
return(sum(dx * my))
}
calcAupr <- function(pred, gs) {
ord.idx <- order(abs(pred), decreasing = T)
prec <- cumsum(gs[ord.idx]) / cumsum(rep(1, length(ord.idx))) #also known as positive predictive value
rec  <- cumsum(gs[ord.idx]) / sum(gs)                     #also know as true positive rate
fpr  <- cumsum(gs[ord.idx] == 0) / (length(gs) - sum(gs)) #false positive rate
prec <- c(prec[1], prec)
rec <- c(0, rec)
fpr <- c(0, fpr)
aupr <- areaUnderCurve(rec, prec)
auroc <- areaUnderCurve(fpr, rec)
return(list(prec=prec, rec=rec, fpr = fpr, AUPR = aupr, AUROC = auroc))
}
temp<-calcAupr(conf_normalized,abs(order_gs_mat))
print(temp$AUPR)
ecovered.interactions<-c()
novel.interactions<-c()
confidence_threshold<-conf_normalized[order(conf_normalized,decreasing=T)][max(which(temp$prec==0.5))]
recovered.mat<-order_gs_mat
recovered.mat[which(conf_normalized < confidence_threshold)]<-0
recovered.interactions<-c()
novel.interactions<-c()
confidence_threshold<-conf_normalized[order(conf_normalized,decreasing=T)][max(which(temp$prec==0.5))]
recovered.mat<-order_gs_mat
recovered.mat[which(conf_normalized < confidence_threshold)]<-0
which(recovered.mat[,sRNAs]!=0)
length(which(IN$priors.mat[,sRNAs]!=0))
novel.interactions<-matrix(0, ncol=ncol(conf_normalized),nrow=nrow(conf_normalized))
rownames(novel.interactions)<-rownames(conf_normalized)
colnames(novel.interactions)<-colnames(conf_normalized)
novel.interactions[which(conf_normalized >= confidence_threshold)]<- sign(combined_betas[which(conf_normalized >= confidence_threshold)])
which(novel.interactions[,sRNAs]!=0)
copra.100.supp<-c(0.19,0.17,0.08)
copra.pval.supp<-c(0.22,0.33,0.11)
copra.100.rec.supp<-c(1,0.67,0)
copra.pval.rec.supp<-c(0.6,0.75,0)
copra.enriched.supp<-c(0.42,0.41,0.16)
copra.enriched.rec.supp<-c(1,0.77,0.5)
copra.top15.supp<-c(0.34,0.52,0.19)
copra.top15.rec.supp<-c(1,0.83,0.67)
copra.AND.supp<-c(0.45,0.59,0.22)
copra.AND.rec.supp<-c(1,0.85,0.75)
copra.OR.supp<-c(1,0.85,0.75)
copra.OR.supp<-c(.27,0.28,0.11)
copra.OR.rec.supp<-c(1,0.77,0)
plot(x=copra.100.supp,y=copra.100.rec.supp,col=c("blue","green","orange"))
plot(x=copra.100.supp,y=copra.100.rec.supp,col=c("purple","green","orange"),xlab="Experimental support rate of CopraRNA-derived sRNA priors")
plot(x=copra.100.supp,y=copra.100.rec.supp,col=c("purple","green","orange"),xlab="Experimental support rate of CopraRNA priors",ylab="Experimental support rate of recovered sRNA priors")
plot(x=copra.100.supp,y=copra.100.rec.supp,col=c("purple","green","orange"),xlab="Experimental support rate of CopraRNA priors",ylab="Experimental support rate of recovered sRNA priors",xlim=c(0,1),ylim=c(0,1))
plot(x=copra.100.supp,y=copra.100.rec.supp,col=c("purple","green","orange"),xlab="Experimental support rate of CopraRNA priors",ylab="Experimental support rate of recovered sRNA priors",xlim=c(0,1),ylim=c(0,1),pch=19)
plot(x=copra.100.supp,y=copra.100.rec.supp,col=c("purple","green","orange"),xlab="Experimental support rate of CopraRNA priors",ylab="Experimental support rate of recovered sRNA priors",xlim=c(0,1),ylim=c(0,1),pch=14)
plot(x=copra.100.supp,y=copra.100.rec.supp,col=c("purple","green","orange"),xlab="Experimental support rate of CopraRNA priors",ylab="Experimental support rate of recovered sRNA priors",xlim=c(0,1),ylim=c(0,1),pch=15)
points(x=copra.pval.supp,y=copra.pval.rec.supp,col=c("purple","green","orange"),pch=16)
points(x=copra.enriched.supp,y=copra.enriched.rec.supp,col=c("purple","green","orange"),pch=17)
points(x=copra.top15.supp,y=copra.top15.rec.supp,col=c("purple","green","orange"),pch=18)
points(x=copra.AND.supp,y=copra.AND.rec.supp,col=c("purple","green","orange"),pch=19)
points(x=copra.OR.supp,y=copra.OR.rec.supp,col=c("purple","green","orange"),pch=4)
pdf(file="fig5A_0306_2019.pdf")
par(mfrow=c(2,2))
plot(x=copra.100.supp,y=copra.100.rec.supp,col=c("purple","green","orange"),xlab="Experimental support rate of CopraRNA priors",ylab="Experimental support rate of recovered sRNA priors",xlim=c(0,1),ylim=c(0,1),pch=15)
points(x=copra.pval.supp,y=copra.pval.rec.supp,col=c("purple","green","orange"),pch=16)
points(x=copra.enriched.supp,y=copra.enriched.rec.supp,col=c("purple","green","orange"),pch=17)
points(x=copra.top15.supp,y=copra.top15.rec.supp,col=c("purple","green","orange"),pch=18)
points(x=copra.AND.supp,y=copra.AND.rec.supp,col=c("purple","green","orange"),pch=19)
points(x=copra.OR.supp,y=copra.OR.rec.supp,col=c("purple","green","orange"),pch=4)
line(x=c(0,1)y=c(0,1),col="red",lty=2)
dev.off()
pdf(file="fig5A_0306_2019.pdf")
par(mfrow=c(2,2))
plot(x=copra.100.supp,y=copra.100.rec.supp,col=c("purple","green","orange"),xlab="Experimental support rate of CopraRNA priors",ylab="Experimental support rate of recovered sRNA priors",xlim=c(0,1),ylim=c(0,1),pch=15)
points(x=copra.pval.supp,y=copra.pval.rec.supp,col=c("purple","green","orange"),pch=16)
points(x=copra.enriched.supp,y=copra.enriched.rec.supp,col=c("purple","green","orange"),pch=17)
points(x=copra.top15.supp,y=copra.top15.rec.supp,col=c("purple","green","orange"),pch=18)
points(x=copra.AND.supp,y=copra.AND.rec.supp,col=c("purple","green","orange"),pch=19)
points(x=copra.OR.supp,y=copra.OR.rec.supp,col=c("purple","green","orange"),pch=4)
line(x=c(0,1),y=c(0,1),col="red",lty=2)
dev.off()
pdf(file="fig5A_0306_2019.pdf")
par(mfrow=c(2,2))
plot(x=copra.100.supp,y=copra.100.rec.supp,col=c("purple","green","orange"),xlab="Experimental support rate of CopraRNA priors",ylab="Experimental support rate of recovered sRNA priors",xlim=c(0,1),ylim=c(0,1),pch=15)
points(x=copra.pval.supp,y=copra.pval.rec.supp,col=c("purple","green","orange"),pch=16)
points(x=copra.enriched.supp,y=copra.enriched.rec.supp,col=c("purple","green","orange"),pch=17)
points(x=copra.top15.supp,y=copra.top15.rec.supp,col=c("purple","green","orange"),pch=18)
points(x=copra.AND.supp,y=copra.AND.rec.supp,col=c("purple","green","orange"),pch=19)
points(x=copra.OR.supp,y=copra.OR.rec.supp,col=c("purple","green","orange"),pch=4)
lines(x=c(0,1),y=c(0,1),col="red",lty=2)
dev.off()
